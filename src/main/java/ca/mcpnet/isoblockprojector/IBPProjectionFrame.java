/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ca.mcpnet.isoblockprojector;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IBPProjectionFrame implements org.apache.thrift.TBase<IBPProjectionFrame, IBPProjectionFrame._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IBPProjectionFrame");

  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BLOCKDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("blockdata", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IBPProjectionFrameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IBPProjectionFrameTupleSchemeFactory());
  }

  public IBPiVector size; // required
  public ByteBuffer blockdata; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SIZE((short)1, "size"),
    BLOCKDATA((short)2, "blockdata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SIZE
          return SIZE;
        case 2: // BLOCKDATA
          return BLOCKDATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IBPiVector.class)));
    tmpMap.put(_Fields.BLOCKDATA, new org.apache.thrift.meta_data.FieldMetaData("blockdata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IBPProjectionFrame.class, metaDataMap);
  }

  public IBPProjectionFrame() {
  }

  public IBPProjectionFrame(
    IBPiVector size,
    ByteBuffer blockdata)
  {
    this();
    this.size = size;
    this.blockdata = blockdata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IBPProjectionFrame(IBPProjectionFrame other) {
    if (other.isSetSize()) {
      this.size = new IBPiVector(other.size);
    }
    if (other.isSetBlockdata()) {
      this.blockdata = org.apache.thrift.TBaseHelper.copyBinary(other.blockdata);
;
    }
  }

  public IBPProjectionFrame deepCopy() {
    return new IBPProjectionFrame(this);
  }

  @Override
  public void clear() {
    this.size = null;
    this.blockdata = null;
  }

  public IBPiVector getSize() {
    return this.size;
  }

  public IBPProjectionFrame setSize(IBPiVector size) {
    this.size = size;
    return this;
  }

  public void unsetSize() {
    this.size = null;
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return this.size != null;
  }

  public void setSizeIsSet(boolean value) {
    if (!value) {
      this.size = null;
    }
  }

  public byte[] getBlockdata() {
    setBlockdata(org.apache.thrift.TBaseHelper.rightSize(blockdata));
    return blockdata == null ? null : blockdata.array();
  }

  public ByteBuffer bufferForBlockdata() {
    return blockdata;
  }

  public IBPProjectionFrame setBlockdata(byte[] blockdata) {
    setBlockdata(blockdata == null ? (ByteBuffer)null : ByteBuffer.wrap(blockdata));
    return this;
  }

  public IBPProjectionFrame setBlockdata(ByteBuffer blockdata) {
    this.blockdata = blockdata;
    return this;
  }

  public void unsetBlockdata() {
    this.blockdata = null;
  }

  /** Returns true if field blockdata is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockdata() {
    return this.blockdata != null;
  }

  public void setBlockdataIsSet(boolean value) {
    if (!value) {
      this.blockdata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((IBPiVector)value);
      }
      break;

    case BLOCKDATA:
      if (value == null) {
        unsetBlockdata();
      } else {
        setBlockdata((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SIZE:
      return getSize();

    case BLOCKDATA:
      return getBlockdata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SIZE:
      return isSetSize();
    case BLOCKDATA:
      return isSetBlockdata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IBPProjectionFrame)
      return this.equals((IBPProjectionFrame)that);
    return false;
  }

  public boolean equals(IBPProjectionFrame that) {
    if (that == null)
      return false;

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (!this.size.equals(that.size))
        return false;
    }

    boolean this_present_blockdata = true && this.isSetBlockdata();
    boolean that_present_blockdata = true && that.isSetBlockdata();
    if (this_present_blockdata || that_present_blockdata) {
      if (!(this_present_blockdata && that_present_blockdata))
        return false;
      if (!this.blockdata.equals(that.blockdata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(IBPProjectionFrame other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    IBPProjectionFrame typedOther = (IBPProjectionFrame)other;

    lastComparison = Boolean.valueOf(isSetSize()).compareTo(typedOther.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, typedOther.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockdata()).compareTo(typedOther.isSetBlockdata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockdata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockdata, typedOther.blockdata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IBPProjectionFrame(");
    boolean first = true;

    sb.append("size:");
    if (this.size == null) {
      sb.append("null");
    } else {
      sb.append(this.size);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockdata:");
    if (this.blockdata == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.blockdata, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (size == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' was not present! Struct: " + toString());
    }
    if (blockdata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blockdata' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (size != null) {
      size.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IBPProjectionFrameStandardSchemeFactory implements SchemeFactory {
    public IBPProjectionFrameStandardScheme getScheme() {
      return new IBPProjectionFrameStandardScheme();
    }
  }

  private static class IBPProjectionFrameStandardScheme extends StandardScheme<IBPProjectionFrame> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IBPProjectionFrame struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.size = new IBPiVector();
              struct.size.read(iprot);
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BLOCKDATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blockdata = iprot.readBinary();
              struct.setBlockdataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IBPProjectionFrame struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.size != null) {
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        struct.size.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.blockdata != null) {
        oprot.writeFieldBegin(BLOCKDATA_FIELD_DESC);
        oprot.writeBinary(struct.blockdata);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IBPProjectionFrameTupleSchemeFactory implements SchemeFactory {
    public IBPProjectionFrameTupleScheme getScheme() {
      return new IBPProjectionFrameTupleScheme();
    }
  }

  private static class IBPProjectionFrameTupleScheme extends TupleScheme<IBPProjectionFrame> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IBPProjectionFrame struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.size.write(oprot);
      oprot.writeBinary(struct.blockdata);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IBPProjectionFrame struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.size = new IBPiVector();
      struct.size.read(iprot);
      struct.setSizeIsSet(true);
      struct.blockdata = iprot.readBinary();
      struct.setBlockdataIsSet(true);
    }
  }

}

