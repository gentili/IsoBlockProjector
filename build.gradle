buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.1'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'forge'
apply plugin: 'com.github.johnrengelman.shadow'


group= "ca.mcpnet.isoblockprojector" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
version = "1.0.0"
archivesBaseName = "isoblockprojector"

minecraft {
    version = "1.7.10-10.13.2.1230"
    runDir = "eclipse"
}

dependencies {
    compile "org.apache.thrift:libthrift:0.9.1"
    testCompile "org.apache.thrift:libthrift:0.9.1:javadoc"
    compile "org.slf4j:slf4j-simple:1.5.8"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

shadowJar { 
    classifier = 'shadow'
    dependencies {
        include (dependency("org.apache.thrift:libthrift:0.9.1"))
        include (dependency("org.slf4j:slf4j-simple:1.5.8"))
        include (dependency("org.slf4j:slf4j-api:1.5.8"))
    }
    relocate 'org.apache.thrift', 'ca.mcpnet.blocktransfer.org.apache.thrift'
    relocate 'org.slf4j', 'ca.mcpnet.blocktransfer.org.slf4j'
    exclude 'GradleStart**'
    exclude '.cache'
}

// ensure reobf happens
reobf.reobf(shadowJar) { spec ->
    spec.classpath = sourceSets.main.compileClasspath;
}

task deleteOrig(type: Delete) {
    delete project.tasks.jar.archivePath.getPath()
}

task deleteShaded(type: Delete) {
    delete project.tasks.shadowJar.archivePath.getPath()
}

shadowJar.dependsOn(deleteShaded)
build.dependsOn(shadowJar)
